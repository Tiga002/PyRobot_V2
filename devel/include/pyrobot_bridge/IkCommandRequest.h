// Generated by gencpp from file pyrobot_bridge/IkCommandRequest.msg
// DO NOT EDIT!


#ifndef PYROBOT_BRIDGE_MESSAGE_IKCOMMANDREQUEST_H
#define PYROBOT_BRIDGE_MESSAGE_IKCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pyrobot_bridge
{
template <class ContainerAllocator>
struct IkCommandRequest_
{
  typedef IkCommandRequest_<ContainerAllocator> Type;

  IkCommandRequest_()
    : pose()
    , tolerance()
    , init_joint_positions()  {
    }
  IkCommandRequest_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , tolerance(_alloc)
    , init_joint_positions(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pose_type;
  _pose_type pose;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tolerance_type;
  _tolerance_type tolerance;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _init_joint_positions_type;
  _init_joint_positions_type init_joint_positions;





  typedef boost::shared_ptr< ::pyrobot_bridge::IkCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pyrobot_bridge::IkCommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct IkCommandRequest_

typedef ::pyrobot_bridge::IkCommandRequest_<std::allocator<void> > IkCommandRequest;

typedef boost::shared_ptr< ::pyrobot_bridge::IkCommandRequest > IkCommandRequestPtr;
typedef boost::shared_ptr< ::pyrobot_bridge::IkCommandRequest const> IkCommandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pyrobot_bridge::IkCommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pyrobot_bridge::IkCommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pyrobot_bridge

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'HasHeader': False, 'IsFixedSize': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::pyrobot_bridge::IkCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pyrobot_bridge::IkCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pyrobot_bridge::IkCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pyrobot_bridge::IkCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pyrobot_bridge::IkCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pyrobot_bridge::IkCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pyrobot_bridge::IkCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "39d822cf6565a6ef77a5d6988b720ffc";
  }

  static const char* value(const ::pyrobot_bridge::IkCommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x39d822cf6565a6efULL;
  static const uint64_t static_value2 = 0x77a5d6988b720ffcULL;
};

template<class ContainerAllocator>
struct DataType< ::pyrobot_bridge::IkCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pyrobot_bridge/IkCommandRequest";
  }

  static const char* value(const ::pyrobot_bridge::IkCommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pyrobot_bridge::IkCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
float64[] pose\n\
float64[] tolerance\n\
float64[] init_joint_positions\n\
\n\
";
  }

  static const char* value(const ::pyrobot_bridge::IkCommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pyrobot_bridge::IkCommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.tolerance);
      stream.next(m.init_joint_positions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IkCommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pyrobot_bridge::IkCommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pyrobot_bridge::IkCommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "pose[]" << std::endl;
    for (size_t i = 0; i < v.pose.size(); ++i)
    {
      s << indent << "  pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pose[i]);
    }
    s << indent << "tolerance[]" << std::endl;
    for (size_t i = 0; i < v.tolerance.size(); ++i)
    {
      s << indent << "  tolerance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tolerance[i]);
    }
    s << indent << "init_joint_positions[]" << std::endl;
    for (size_t i = 0; i < v.init_joint_positions.size(); ++i)
    {
      s << indent << "  init_joint_positions[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.init_joint_positions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PYROBOT_BRIDGE_MESSAGE_IKCOMMANDREQUEST_H
